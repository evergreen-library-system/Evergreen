


<script  src="[% ctx.media_prefix %]/js/ui/default/opac/simple.js[% ctx.cache_key %]"></script>
[% INCLUDE "opac/i18n_strings.tt2" %]


[% IF ctx.readonly %]
<script >
  $(document).ready(function() {
    $('a').removeAttr('href');
    $('a').removeAttr('data-toggle');
    $('a').click(function(event) { event.preventDefault(); });
    $('button').prop('disabled', true);
    $('button').click(function(event) { event.preventDefault(); });
    $('input').prop('disabled', true);
    $('input').click(function(event) { event.preventDefault(); });
    $('select').prop('disabled', true);
    $('select').click(function(event) { event.preventDefault(); });
    $('textarea').prop('disabled', true);
    $('textarea').click(function(event) { event.preventDefault(); });
  });
</script>
[% END %]

[% IF ctx.get_org_setting(ctx.search_ou, 'opac.patron.custom_jquery') %]
[%     custom_jquery = ctx.get_org_setting(ctx.search_ou, 'opac.patron.custom_jquery') %]
[%     '<script>'; custom_jquery ; '</script>' %]
[% END %]

<!-- Accessible session timeout -->
[% # auth.opac_timeout is the number of seconds
authtimeout = ctx.get_org_setting(ctx.physical_loc || ctx.aou_tree.id, 'auth.opac_timeout');
IF authtimeout AND !ctx.is_staff %]
<script>
    function timeControl() {
        // set timer for 3 minutes less than the limit, then ask user to confirm.
        setTimeout(userCheck, ([% authtimeout %] * 1000) - (3 * 60 * 1000));
        // console.debug("Timer set; ask in: ", ([% authtimeout %] * 1000) - (3 * 60 * 1000));
    }
    function userCheck() {
        // set page refresh for 3 minutes
        var id = setTimeout(authReload, (3 * 60 * 1000));
        // If user selects "OK" the timer is reset 
        // if the user selects 'cancel', nothing will happen until the original time limit;
        // then they will be redirected to the home page
        if (confirm( "[% l('You will be logged out in a few minutes. Would you like more time?') %]" )) {
            clearTimeout(id);
            timeControl();
        }
    }
    function authReload() {
        window.location = ("[% ctx.opac_root %]");
    }
    timeControl();
    // console.debug("Timeout (seconds): ", ([% authtimeout %]));
</script>
[% END %]

<!-- DOB validation for Patron Registration in OPAC -->
<script >
    function dobValidate(input) {
        var validformat = /^(19|20)\d\d([- /.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])$/
        var returnval = false
        if (!validformat.test(input.value))
            alert("[% l('You have entered an invalid date, or an improperly formatted date.  Please enter Date of Birth in YYYY-MM-DD or YYYY/MM/DD format and try again.') %]")
        else
            returnval = true
        if (returnval == false) input.select()
        return returnval
}
</script>

[%- IF ctx.use_stripe %]
<script >unHideMe($("pay_fines_now"));[%# the DOM is loaded now, right? %]</script>
[% END -%]

[%- IF ctx.is_staff %]
<script  src="[% ctx.media_prefix %]/js/ui/default/opac/staff.js[% ctx.cache_key %]"></script>
    [% IF ctx.page == 'record' %]
        [% IF ctx.search_result_index >= 0 %]
        <script>
            rdetail_next_prev_actions(
                "[% ctx.search_result_index %]",
                "[% ctx.hit_count %]",
                "[% ctx.prev_rec_url || '' %]",
                "[% ctx.next_rec_url || '' %]",
                "[% mkurl(ctx.first_search_record, {page => 0}) %]",
                "[% mkurl(ctx.opac_root _ '/results', {find_last => 1, page => POSIX.floor(ctx.hit_count / ctx.page_size)}) %]",
                "[% mkurl(ctx.opac_root _ '/results', {}, ['expand','cnoffset']) %]"
            );
        </script>
        [% END %]
        [% IF ctx.mfhd_summaries.size %]
        <script>
            window.mfhdDetails = [
                [% FOR summary IN ctx.mfhd_summaries %]
                    [% IF summary.sre_id != -1 %]
                {
                    'id' : '[% summary.sre_id %]',
                    'label' : '[% summary.location | replace("'", "\\'") %]',
                    'entryNum' : [% loop.index %],
                    'owning_lib' : '[% summary.owning_lib %]'
                },
                    [% END %]
                [% END %]
            ];
        </script>
        [% END %]
    [% END %]
[%- END %]

[%- IF ENV.OILS_NOVELIST_URL AND ctx.page == 'record';
    url = ENV.OILS_NOVELIST_URL;
    IF CGI.https; url = url.replace('^http:', 'https:'); END; %]
<script id='EIT' src='[% url %]'></script>
[%- END %]
[%- IF ctx.page == 'record' AND ctx.google_books_preview %]
<script src='[% ctx.media_prefix %]/js/ui/default/opac/ac_google_books.js[% ctx.cache_key %]' async defer></script>
[%- END %]

<script>
    window.egStrings = [];
    window.egStrings['CONFIRM_BASKET_EMPTY'] = "[% l('Remove all records from basket?') %]";
</script>
<script src='[% ctx.media_prefix %]/js/ui/default/opac/record_selectors.js[% ctx.cache_key %]' async defer></script>

<!-- Require some inputs and selections for browsers that don't support required form field element -->
[% IF ctx.page == 'place_hold' %]
  <script  src="[% ctx.media_prefix %]/js/ui/default/opac/holds-validation.js[% ctx.cache_key %]">
  </script>
[% END %]

[%- IF want_dojo; -%]
<script >
     var djConfig = {
         locale: "[% ctx.locale | lower | replace('_', '-') %]",
         parseOnLoad: true,
         isDebug: false
     }, lang, bidi;
</script>
<script  src="[% ctx.media_prefix %]/js/dojo/dojo/dojo.js?[% ctx.eg_cache_hash %]"></script>

[%- # So the following works in Mozilla and Chrome, but not in IE8.
    # Seems like it /should/ work anywhere, though, and obviate the
    # next three script tags: %]
<!-- <script  src="[% ctx.media_prefix %]/js/dojo/DojoSRF.js?[% ctx.eg_cache_hash %]"></script> -->

<script  src="[% ctx.media_prefix %]/js/dojo/opensrf/opensrf.js?[% ctx.eg_cache_hash %]"></script>
<script  src="[% ctx.media_prefix %]/js/dojo/opensrf/opensrf_xhr.js?[% ctx.eg_cache_hash %]"></script>
<script  src="[% ctx.media_prefix %]/js/dojo/opensrf/JSON_v1.js?[% ctx.eg_cache_hash %]"></script>

[% IF use_autosuggest.enabled == "t" AND basic_search != "f"; %]
<script type="module">
  import {ListBoxCombobox} from '[% ctx.media_prefix %]/js/ui/default/opac/autosuggest.module.js';
  document.addEventListener('DOMContentLoaded', () => {new ListBoxCombobox('search_box').attach()}, {once: true})
</script>
[% END; # use_autosuggest %]

[% INCLUDE "opac/parts/acjs.tt2" IF ctx.page == 'record' %]
[% IF ctx.page == 'advanced' %]
<script
    src="[% ctx.media_prefix %]/js/ui/default/opac/copyloc.js[% ctx.cache_key %]"></script>
[% END %]

[% IF ebook_api.enabled == 'true' %]
    [% INCLUDE "opac/parts/ebook_api/base_js.tt2" %]
    [% INCLUDE "opac/parts/ebook_api/login_js.tt2" IF (ctx.page == 'login') %]
[% END %]

<script src='[% ctx.media_prefix %]/js/ui/default/opac/test_notification.js'></script>

<!-- provide a JS friendly org unit hash -->
<script >
var aou_hash = {
[% FOR org_unit IN ctx.aou_list %]
    [% org_unit.id %] : {
        id : "[% org_unit.id %]",
        name : "[% org_unit.name | replace('"', '\"') %]",
        parent_ou : "[% org_unit.parent_ou %]",
        depth : "[% org_unit.ou_type.depth %]",
        can_have_vols : "[% org_unit.ou_type.can_have_vols %]"
    }[%- ',' UNLESS loop.last -%]
[% END %]
};
</script>

<script >if ($('#client_tz_id')) { $('#client_tz_id').value = OpenSRF.tz }</script>
[%- END; # want_dojo -%]

[%- IF ctx.max_cart_size; %]
<script >var max_cart_size = [% ctx.max_cart_size %];</script>
[%- END; %]

<!-- JS imports, etc. jQuery is loaded in <head> -->
<script src="[% ctx.media_prefix %]/opac/deps/node_modules/popper.js/dist/umd/popper.min.js[% ctx.cache_key %]"></script>
<script src="[% ctx.media_prefix %]/opac/deps/node_modules/bootstrap/dist/js/bootstrap.min.js[% ctx.cache_key %]"></script>
<script src="[% ctx.media_prefix %]/opac/deps/node_modules/@duetds/date-picker/dist/duet/duet.js[% ctx.cache_key %]"></script>

<script>
    // Datepicker format conversion
    // See https://duetds.github.io/date-picker/
    const DATE_FORMAT_US = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/
    document.querySelectorAll("duet-date-picker").forEach(picker => {
        picker.dateAdapter = {
            parse(value = "", createDate) {
            const matches = value.match(DATE_FORMAT_US)

            if (matches) {
                return createDate(matches[3], matches[1], matches[2])
            }
            },
            format(date) {
                return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`
            },
        }

        picker.localization = {
            buttonLabel: "Choose date",
            placeholder: "mm/dd/yyyy",
            selectedDateMessage: "Selected date is",
            prevMonthLabel: "Previous month",
            nextMonthLabel: "Next month",
            monthSelectLabel: "Month",
            yearSelectLabel: "Year",
            closeLabel: "Close date picker",
            calendarHeading: "Choose a date",
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            locale: "en-US",
        }
    });

    // Password visibility eye
    $(document).ready(function(){
        $("#loginModal").on('shown.bs.modal', function(){
            $(this).find('#username_field').focus();
        });
        // password visibility eye
        let btn = document.getElementById('show_password');
        let input = document.getElementById('password_field');
        let icon = btn.querySelector('i');
        btn.addEventListener('click', () => {
            if(input.type == 'password'){
                input.type = 'text';
                icon.setAttribute('class', 'fas fa-eye');
                btn.setAttribute('aria-checked', 'true');
            }else {
                input.type = 'password';
                icon.setAttribute('class', 'fas fa-eye-slash');
                btn.setAttribute('aria-checked', 'false');
            }
            input.focus();
        });
        let loginForm = document.getElementById('login_form');
        loginForm.addEventListener('submit', ()=>{
            input.type = 'password';
        });
    });
</script>
<script>
    // roving tabindex for closed summaries (focusable children bug workaround)
    window.addEventListener('load', () => {
        document.querySelectorAll('details').forEach(details => 
            details.querySelectorAll('a, button, input, select, textarea').forEach(el => {
                el.setAttribute('tabindex', details.open ? 0 : -1);
            })
        );
    });

    document.querySelectorAll('details').forEach(details => 
        details.addEventListener('toggle', () => {
            details.querySelectorAll('a, button, input, select, textarea').forEach(el => {
                el.setAttribute('tabindex', details.open ? 0 : -1);
            });
        })
    );

    document.querySelectorAll('.cover-img').forEach(img => {
        if ( img.offsetWidth < 2 ) {
            img.parentNode.remove();
        }
    });
</script>

<script>
/* Based on Toggletips by Heydon Pickering, https://inclusive-components.design/tooltips-toggletips/ */
/* Modified to work with existing aria-label; added mouseenter and mouseleave events that toggle the role attribute */
(function() {
  // Get all the toggletip buttons
  var toggletips = document.querySelectorAll('[data-toggletip]');

  // Iterate over them
  Array.prototype.forEach.call(toggletips, function(toggletip) {
    
    // remove title attributes from things that should not be toggletips
    if ( !['a', 'button'].includes(toggletip.tagName.toLowerCase()) ) {
      toggletip.removeAttribute('title');
      return;
    }

    // Create the container element
    var container = document.createElement('span');
    container.setAttribute('class', 'toggletip-container');
    toggletip.after(container);
    
    // Create the live region
    var liveRegion = document.createElement('span');
    liveRegion.setAttribute('role', 'status');
    container.appendChild(liveRegion);

    // Build tooltip content from title 
    var message = toggletip.getAttribute('title');
    toggletip.removeAttribute('title');
    toggletip.setAttribute('role', 'button');
    toggletip.setAttribute('tabindex', '0'); // in case someone forgot the href

    // Toggle the message
    toggletip.addEventListener('click', function() {
        liveRegion.innerHTML = '';
        document.querySelectorAll('.toggletip-bubble').forEach(bubble => bubble.remove());
        window.setTimeout(function() {
          liveRegion.innerHTML = '<span class="toggletip-bubble">'+ message +'</span>';
        }, 100);
    });
    toggletip.addEventListener('mouseenter', function() {
        // don't announce on hover
        liveRegion.removeAttribute('role');
        liveRegion.innerHTML = '';
        document.querySelectorAll('.toggletip-bubble').forEach(bubble => bubble.remove());
        window.setTimeout(function() {
          liveRegion.innerHTML = '<span class="toggletip-bubble">'+ message +'</span>';
        }, 100);
    });

    // Close on outside click
    document.addEventListener('click', function (e) {
      if (toggletip !== e.target) {
        liveRegion.innerHTML = '';
      }                        
    });

    // Remove toggletip on ESC
    toggletip.addEventListener('keydown', function(e) {
      if (e.key === 'Escape')
        liveRegion.innerHTML = '';
    });
    
    // Remove on blur
    toggletip.addEventListener('blur', function (e) {
      liveRegion.innerHTML = '';
    });
    
    // Remove toggletip on mouseleave and reset role to status
    toggletip.addEventListener('mouseleave', function(e) {
      liveRegion.innerHTML = '';
      liveRegion.setAttribute('role', 'status');
    });
  });
}());
</script>
