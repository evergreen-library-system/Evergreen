[%  PROCESS "opac/parts/misc_util.tt2";
    PROCESS "opac/parts/hold_error_messages.tt2";
    PROCESS "opac/parts/metarecord_hold_filters.tt2";
%]
<script>
// Toggle the activation date input and check the suspend checkbox.
// If JavaScript is disabled, the CSS will handle the former, but
// the latter will not happen.
function toggleActivationDate() {
    var cb = document.getElementById("hold_suspend");
    var block = document.getElementById("toggled-block-suspend");
    var anchor = document.getElementById("actDateToggle");
    var actText = "[%- l('Hide activation date') -%]";
    var inActText = "[%- l('Set activation date') -%]";
    // Check for not equal to block so it works on first click.
    if (block.style.display != "block") {
        block.style.display = "block";
        anchor.innerHTML = "<i class='fas fa-calendar' aria-hidden='true'></i> " + actText;
        if (cb.checked != true) cb.checked = true;
    } else {
        block.style.display = "none";
        anchor.innerHTML = "<i class='fas fa-calendar' aria-hidden='true'></i> " + inActText;
    }
    // Prevent the href from being followed, thus overriding the CSS.
    return false;
}

// Maybe enable or disable the num_copies select when the user selects
// or deselects a part.
function maybeToggleNumCopies(obj) {
    var numCopies = document.getElementById("num_copies");
    // Only if numCopies exists.
    if (numCopies) {
        var objValue;
        if (obj.type == 'radio') {
            if (obj.checked) objValue = obj.value;
            else return;
        } else {
            objValue = obj.value;
        }
        if (objValue && objValue != '') {
            if (numCopies.value != '1') numCopies.value = '1';
            if (!numCopies.disabled) numCopies.disabled = true;
        } else {
            if (numCopies.disabled) numCopies.disabled = false;
        }
    }
}

//Doublecheck whether their default pickup library is valid. Should only be invalid if pulled from disabled home library when the page loads, but adding more checks just in case
function checkValidPickupLib()
{
    let org_selector = document.getElementById('pickup_lib');
    if (org_selector != null && org_selector[org_selector.selectedIndex].disabled == true) {

        //Are they at the default message or the warning?
        if (org_selector[org_selector.selectedIndex].value == -1){
            document.getElementById("place_hold_submit").disabled = true;
            org_selector.style.backgroundColor= "#FFF1A5";
            org_selector.invalid = true;
        }
        else{
            org_selector.style.backgroundColor= "#FFF1A5";
            org_selector.invalid = true;
            document.getElementById("pickup-lib-unavailable-warning").hidden = false;
            document.getElementById("place_hold_submit").disabled = true;
        }
    }
    else {
        org_selector.invalid = false;
        org_selector.style.backgroundColor = "#fff";
        document.getElementById("pickup-lib-unavailable-warning").hidden = true;
        document.getElementById("place_hold_submit").disabled = false;
    }
}

//Create and add a generic option for the start of the selector
function createDefaultOption()
{
    let org_selector = document.getElementById('pickup_lib');

    let null_option = document.createElement("option");
    null_option.innerText = "[% l('Choose a pickup location') %]";
    null_option.disabled = true;
    null_option.value = -1;
    null_option.style.backgroundColor = "#fff";
    org_selector.add(null_option, 0);
}

//Check if org valid once when the page loads and then every time you change it could be valid again, so check again
document.addEventListener("DOMContentLoaded", () => {
    let org_selector = document.getElementById('pickup_lib');

    //Keep original colors of org unit dropdown for the sake of readability
    let options = org_selector.children;
    //We also need the list of all orgs in the list
    let lib_ids = Array(options.length).fill(0);
    for (let i = 0; i < options.length; i++){
        options[i].style.backgroundColor= "#fff";
        lib_ids[i] = options[i].value;
    }

    //If the user's default pickup library is not in the dropdown (probably due to being hidden from the OPAC)
    let default_lib = [% GET ctx.default_pickup_lib %];
    if (!lib_ids.includes(default_lib.toString())){
        //Create and use the default message instead
        createDefaultOption();
        org_selector.selectedIndex = 0;
    }

    checkValidPickupLib(); 
    document.getElementById('pickup_lib').addEventListener("change", checkValidPickupLib);

    });


</script>
<div class='container'>
   <h2>[% l('Place Hold') %]</h2>

    [% some_holds_allowed = -1 %]

    <!-- loop through the holds and display status of request where appropriate -->
        [% FOR hdata IN ctx.hold_data;
            attrs = {marc_xml => hdata.marc_xml};
            PROCESS get_marc_attrs args=attrs;
            this_hold_disallowed = 0;

            IF CGI.param('hold_type') == 'M';
              IF hdata.metarecord_filters.formats.size == 0;
                this_hold_disallowed = 1;
                # if this is the first hold and it is disallowed,
                # assume all holds are, until we proven otherwise
                SET some_holds_allowed = 0 IF some_holds_allowed == -1;
              ELSE; some_holds_allowed = 1; END;
            END %]

       [% IF loop.first %]
    <form method="post" name="PlaceHold" onsubmit="return validateHoldForm()" >
        <input type="hidden" name="hold_type" value="[% CGI.param('hold_type') | html %]" />
        [%
            redirect = CGI.param('hold_source_page') || CGI.param('redirect_to') || CGI.referer;
            # since we have to be logged in to get this far, return to a secure page
            redirect = redirect.replace('^http:', 'https:')
        %]
        <input type="hidden" name="redirect_to" value="[% redirect | html %]" />
        <input type="hidden" name="hold_source_page" value="[% CGI.param('hold_source_page') | html %]" />

        <!-- Adding hidden fields so that parameters are maintained in
        searchbar throughout the place hold process. -->
        <input type="hidden" name="locg" value="[% CGI.param('locg') | html %]" />
        <input type="hidden" name="qtype" value="[% CGI.param('qtype') | html %]" />
        <input type="hidden" name="query" value="[% CGI.param('query') | html %]" />
        [%
            usr_barcode = CGI.param('usr_barcode') | html;
            is_requestor = CGI.param('is_requestor');

           IF is_requestor == '';
               is_requestor = '0';
           END;

           IF is_requestor == '0' && usr_barcode == ctx.staff_recipient.card.barcode;
               usr_barcode = '';
           END;
        %]

        [% IF ctx.is_staff %]
        <p class="staff-hold">
            <input type="radio" id="hold_usr_is_requestor_not"
                onchange="staff_hold_usr_input_disabler(this);"
                name="hold_usr_is_requestor" value="0"
                />
            <label for="hold_usr_is_requestor_not">
                [% l("Place hold for patron by barcode:") %]
            </label>
            <input type="text" name="hold_usr" id="hold_usr_input"
              aria-label="[% l('Barcode') %]"
              value="[% usr_barcode | html %]"
              onpaste="return debounce_barcode_change(event)"
              onkeydown="return debounce_barcode_change(event)" autofocus />
            <span id="patron_name"></span>
            <span id="patron_usr_barcode_not_found" style="display: none">
              [% l('Patron barcode was not found') %]
            </span>
            [% IF ctx.is_browser_staff %]
            <button id="hold_usr_search" type="button" class="btn btn-action" style="display: none;">[% l('Patron Search') %]</button>
            [% END %]
            <br />
            <input type="hidden" id="staff_barcode"
              value="[% ctx.staff_recipient.card.barcode | html %]"/>
            <span>
                <input type="radio" id="hold_usr_is_requestor"
                    onchange="staff_hold_usr_input_disabler(this);"
                    name="hold_usr_is_requestor" value="1" />
                <label for="hold_usr_is_requestor">
                    [% l("Place this hold for me ([_1] [_2])", ctx.user.first_given_name, ctx.user.family_name) | html %]
                </label>
            </span>
            [% IF CGI.param('hold_type') == 'T' AND ctx.hold_subscriptions.size > 0 AND NOT CGI.param('from_basket') %]
              <br />
              <!-- request for a reading group / subscription -->
              <input type="radio" id="hold_usr_is_subscription"
                  onchange="staff_hold_usr_input_disabler(this);"
                  name="hold_usr_is_requestor" value="2"
                  />
              <label for="hold_usr_is_subscription">
                  [% l("Place hold for patron Hold Group:") %]
              </label>
              <select id='select_hold_subscription' name='hold_subscription'>
                  <option selected='selected' value=''>[% l('- Hold Groups -') %]</option>
                  [% FOR sub IN ctx.hold_subscriptions %]
                  <option value='[% sub.id %]'>[% sub.name | html %]</option>
                  [% END %]
              </select>
            [% END %]
            <br/>
            <label>
              <input id="override_blocks_subscription" name="override" type="checkbox" checked="checked"/>
              [% l("Override all hold-blocking conditions possible?") %]
            </label>
        </p>
        [% END %]
        [% END %]

        <div>
         
                    [% IF !this_hold_disallowed %]
                    <input type="hidden" name="hold_target" value="[% hdata.target.id | html %]" />
                    [% END %]
                    <div class='hold-items-list-title'>
                        <!-- If hold is for grouped formats/editions (metarecord), show short title - else, show complete title -->
                        [% IF CGI.param('hold_type') == 'M' %]
                            [% attrs.title | html %]
                        [% ELSE %]
                            [% attrs.title_extended | html %]
                        [% END %]
                    </div>
                    [% IF hdata.parts AND !this_hold_disallowed %]
                        [% IF hdata.parts.size > 0 %]
                        <div class='hold-div'>
                            [% IF enable.radio.parts == 'true' %]
                                <span class='hold-span'><label for='select_hold_part'>[%
                               l('Select a Part:')
                               %]</label></span>
                             <div class='radio-parts-selection'>
                             [% IF !hdata.part_required %]
                                <span class='parts-radio-option'>
                                 <input type='radio' name='part' value='' onchange='maybeToggleNumCopies(this);' required>[% ctx.any_part_label %]</span>
                              [% END %]
                               [% FOR part IN hdata.parts %]
                                 <span class='parts-radio-option'><input type='radio' name='part' id=[% part.id %] value=[% part.id %] onchange='maybeToggleNumCopies(this);' required>
                                  <label for=[% part.id %]>[% part.label | html %]</label></span>
                              [% END %]
                              </div>
                          [% ELSE %]
                            <span style='font-weight: bold;'><label for='select_hold_part'>[%
                                hdata.part_required ? l('Select a Part:') : l('Select a Part (optional):')
                            %]</label></span>
                            <select id='select_hold_part' name='part' onchange='maybeToggleNumCopies(this);'>
                                [% IF !hdata.part_required %]
                                <option selected='selected' value=''>[% ctx.any_part_label %]</option>
                                [% END %]
                                [% FOR part IN hdata.parts %]
                                <option value='[% part.id %]'>[% part.label | html %]</option>
                                [% END %]
                            </select>
                          [% END %]
                        </div>
                        [% ELSE %]
                        <input type='hidden' name='part' value=''/>
                        [% END %]
                    [% END %]
            [% INCLUDE "opac/parts/multi_hold_select.tt2" IF NOT (this_hold_disallowed AND hdata.part_required); %]

            [% IF this_hold_disallowed %]
                <div class="mr_holds_no_formats">
                [% l('This item does not have any formats available for holds placement') %]
                </div>
            [% END %]
</div>
        [% END %]


        [% IF some_holds_allowed %]

        <p class="w-50">
            [%- org_select_id = 'pickup_lib'; -%]
            <label for="[% org_select_id %]" class="font-weight-bold">[%l('Pickup location:') %]</label>
            [% PROCESS "opac/parts/org_selector.tt2";
                INCLUDE build_org_selector name='pickup_lib'
                    value=ctx.default_pickup_lib id=org_select_id
                    can_have_vols_only=1 hold_pickup_lib=1 %]
            <label id="pickup-lib-unavailable-warning" for="[% org_select_id %]" class= "font-weight-bold" style= "color: #D0343A" aria-live="polite" hidden>[% l('* Pickup location unavailable. Please choose a different pickup location.') %]</label>
            <!-- <label id="choose-pickup-lib-warning" for ="[% org_select_id %]" class="font-weight-light" aria-live="polite" hidden>[% l('* Please choose a pickup location') %]</label>             
            -->
            
        </p>

            <span class="font-weight-bold">[% l('Notify when hold is ready for pickup?') %]</span>
            <p>
             <div class="form-check m-2">
                <input class="form-check-input hold-alert-method" type="checkbox" value="t" id="email_notify" name="email_notify" [% IF !ctx.user.email %]disabled="true"[% ELSIF ctx.default_email_notify %]checked="checked"[% END %]>
                <label class="form-check-label" for="email_notify">
                   [% l('Yes, by Email') %]

                     [% IF !ctx.user.email and !ctx.is_staff; l('<br>No configured Email address. See "My Account" for setting your Email address.'); ELSE; %] : <span id="email_address"><b name="email_address">[% ctx.user.email %]</b></span>[% END %]
                </label>
            </div>
            
                [%- IF allow_phone_notifications == 'true' %]
                <div class="form-check m-2">
                    <input class="form-check-input hold-alert-method" type="checkbox" id="phone_notify_checkbox" name="phone_notify_checkbox" [% IF ctx.default_phone_notify %]checked="checked"[% END %]>
                    <label class="form-check-label" for="phone_notify_checkbox">
                    [% l('Yes, by Phone') %]
                    </label>
                </div>

                <p>
                    <label>[% l('Phone Number:') %]<input type="text" class="form-control" name="phone_notify" [% setting = 'opac.default_phone';
                    IF ctx.user_setting_map.$setting; %] value='[% ctx.user_setting_map.$setting | html %]'
                    [%- ELSIF ctx.user.day_phone; %] value='[% ctx.user.day_phone | html %]' [% END %]/></label>
                </p>
                [%- END -%]
                [% IF ctx.get_org_setting(ctx.search_ou, 'sms.enable') == 1 %]
                <input class="hold-alert-method" type="checkbox" id="sms_notify_checkbox" name="sms_notify_checkbox"
                    [% IF ctx.default_sms_notify %]checked="checked"[% END %]/>
                    <label for="sms_notify_checkbox">[% l('Yes, by Text Messaging') %]</label><br/>
                <p>
                    [% INCLUDE "opac/parts/sms_carrier_selector.tt2" %]<br/>
                    [% INCLUDE "opac/parts/sms_number_textbox.tt2" %]<br/>
                </p>
                [% END %]
            </p>
            <div>

             [% IF ctx.hold_data.size > 0; %]
            <div class="form-check m-2">
                <input class="form-check-input" type="checkbox" value="t" id="hold_suspend" name="hold_suspend">
                <label class="form-check-label" for="hold_suspend">
                [% IF ctx.hold_data.size == 1;
                    l('Suspend this hold?');
                ELSE;
                    l('Suspend these holds?');
                END %]
                  <a href="#" aria-label="[% l('What is a suspended hold?') %]" title="[% l('A suspended hold will retain its place in the queue, but will not be fulfilled until it has been activated.') %]" data-toggletip>
                    <i class="fas fa-question-circle" aria-hidden="true"></i>
                </a>
                </label>
            </div>
                [% END %]




                <a class="btn btn-sm btn-action m-2" id="actDateToggle" href="#toggled-block-suspend" onclick="return toggleActivationDate();"><i class="fas fa-calendar" aria-hidden="true"></i> [% l('Set activation date') %]</a>
            </div>
            <blockquote id="toggled-block-suspend">
            <label for="thaw_date">[% l('Activate on') %]
            <duet-date-picker identifier="thaw_date" value="[% thaw_date | html %]"></duet-date-picker>
            </blockquote>

         [% IF CGI.param('from_basket') %]

           <div class="form-check m-2">
                    <input class="form-check-input" type="checkbox" value="" id="clear_cart" />
                    <label class="form-check-label" for="clear_cart">
                        [% l('Clear basket after holds are requested?') %]
                    </label>
                </div>
        [% END %]
                 [% IF NOT metarecords.disabled AND ctx.hold_data.size == 1 %]
                        [% IF CGI.param('hold_type') == 'T' AND hdata.record.metarecord AND !hdata.part_required %]
                        <!-- Grab the bre_id so that we can restore it if user accidentally clicks advanced options -->
                           [% bre_id = hdata.target.id %]
                            <a  id='advanced_hold_link' class="btn btn-sm btn-link"
                                href="[% mkurl('', {hold_type => 'M', hold_target => hdata.record.metarecord.id, bre_id => bre_id}) %]"><i class="fas fa-cog" aria-hidden="true"></i>
                                [% l('Advanced Hold Options') %]</a>
                        [% END %]
                        [% IF CGI.param('hold_type') == 'M' AND CGI.param('bre_id') %]
                            <input type="hidden" name="bre_id" value="[% CGI.param('bre_id') %]" />
                            <a id='basic_hold_link' class="btn btn-sm btn-link"
                               href="[% mkurl('', {hold_target => CGI.param('bre_id'), hold_type => 'T'}) %]"><i class="fas fa-cog" aria-hidden="true"></i>
                                [% l('Basic Hold Options') %]</a>
                        [% END %]
                        [% IF hdata.metarecord_filters.formats.size OR # should this be size > 1
                            (hdata.metarecord_filters.langs.size && hdata.metarecord_filters.langs.size > 1);
                            PROCESS metarecord_hold_filters_selector hold_data=hdata;
                        END;
                    END %]
        <div class="py-3">
        <button id="place_hold_submit" type="submit" name="submit"  class="btn btn-confirm" ><i class="fas fa-check"></i> [% l('Submit') %]</button>
        [% END # some_holds_allowed %]
        <button type="reset" name="cancel" onclick="window.location='[% redirect | html %]'" id="holds_cancel" class="btn btn-deny"><i class="fas fa-ban" aria-hidden="true"></i> [% l('Cancel') %]</button>
        </div>
    </form>
</div>

