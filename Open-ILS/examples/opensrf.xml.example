<?xml version='1.0'?>

<!-- 
Example opensrf config file for OpenILS
vim:et:ts=4:sw=4:
-->

<opensrf version='0.0.3'>

    <default>

        <!-- unless otherwise overidden, use this locale -->
        <default_locale>en-US</default_locale>

        <dirs>
            <log>LOCALSTATEDIR/log</log> <!-- unix::server log files -->
            <sock>LOCALSTATEDIR/lock</sock> <!-- unix::server sock files -->
            <pid>LOCALSTATEDIR/run</pid>
            <xsl>LOCALSTATEDIR/xsl</xsl>
            <script>LOCALSTATEDIR</script>
            <script_lib>LOCALSTATEDIR</script_lib>
            <templates>LOCALSTATEDIR/templates</templates>
        </dirs>

        <!-- global data visibility settings -->
        <share>
            <user>
                <!-- Set to "true" to require patron opt-in for foreign (non-home_ou) transactions -->
                <opt_in>false</opt_in>
            </user>
        </share>

        <IDL>SYSCONFDIR/fm_IDL.xml</IDL> <!-- top level IDL file -->
        <IDL2js>fm_IDL2js.xsl</IDL2js> <!-- IDL JS XSLT -->


        <server_type>prefork</server_type> <!-- net::server type -->

        <ils_events>LOCALSTATEDIR/data/ils_events.xml</ils_events> <!-- ILS events description file -->

        <email_notify> <!-- this will eventually move into the notifications section below... -->
            <!-- global email notification settings -->
            <template>LOCALSTATEDIR/data/hold_notification_template.example</template>
            <smtp_server>localhost</smtp_server>

            <!--
            in most cases, this is overridden by location 
            specific config settings.  this is just the default
            -->
            <sender_address>evergreen@localhost</sender_address>
        </email_notify>


      <notifications>
        <!-- global mail server settings -->
        <smtp_server>localhost</smtp_server>
        <sender_address>evergreen@localhost</sender_address>

        <!-- global telephony (asterisk) settings -->
        <telephony>
            <!-- replace all values below when telephony server is configured -->
            <enabled>0</enabled>
            <driver>SIP</driver>    <!-- SIP (default) or multi -->
            <channels>              <!-- explicit list of channels used if multi -->
                                    <!-- A channel specifies technology/resource -->
                <channel>Zap/1</channel>
                <channel>Zap/2</channel>
                <channel>IAX/user:secret@widgets.biz</channel>
            </channels>
            <host>localhost</host>
            <port>10080</port>
            <user>evergreen</user>
            <pw>evergreen</pw>
            <!--
                The overall composition of callfiles is determined by the
                relevant template, but this section can be invoked for callfile
                configs common to all outbound calls.
                callfile_lines will be inserted into ALL generated callfiles
                after the Channel line.  This content mat be overridden
                (in whole) by the org unit setting callfile_lines.
                Warning: Invalid syntax may break ALL outbound calls.
            -->
            <!-- <callfile_lines>
                MaxRetries: 3
                RetryTime: 60
                WaitTime: 30
                Archive: 1
                Extension: 10
            </callfile_lines> -->
        </telephony>

        <!-- Overdue notices: DEPRECATED in 2.0 in favour of Action/Trigger Notifications -->
        <overdue>

            <!-- optionally, you can define a sender address per notice type -->
            <sender_address>overdue@localhost</sender_address>

            <!-- The system can generate an XML file of overdue notices.  This is the
                directory where they are stored.  Files are named overdue.YYYY-MM-DD.xml -->
            <notice_dir>LOCALSTATEDIR/data/overdue</notice_dir>
            <combined_template>LOCALSTATEDIR/data/templates/overdue_combined_xml.example</combined_template>

            <notice>
                <!-- Notify at 7 days overdue -->
                <notify_interval>7 days</notify_interval>
                <!-- Options include always, noemail, and never.  'noemail' means a notice
                     will be appended to the notice file only if the patron has no valid email address.  -->
                <file_append>noemail</file_append>
                <!-- do we attempt email notification? -->
                <email_notify>false</email_notify>
                <!-- notice template file -->
                <email_template>LOCALSTATEDIR/data/templates/overdue_7day.example</email_template>
            </notice>
        </overdue>

        <!-- Courtesy notices: DEPRECATED in 2.0 in favour of Action/Trigger Notifications -->
        <predue>
            <notice>
                <!-- All circulations that circulate between 5 and 13 days -->
                <circ_duration_range>
                    <from>5 days</from>
                    <to>13 days</to>
                </circ_duration_range>
                <!-- notify at 1 day before the due date -->
                <notify_interval>1 day</notify_interval>
                <file_append>false</file_append>
                <email_notify>false</email_notify>
                <email_template>LOCALSTATEDIR/data/templates/predue_1day.example</email_template>
            </notice>
        </predue>
      </notifications>

        <!-- Settings for the hold targeter cron job -->
        <hold_targeter>
            <!-- number of parallel processes to use during hold targeting;
                 increasing can speed up (re)targeting a large number of
                 hold requests, but with diminishing returns after a point;
                 if increasing this value, it is recommend to do so slowly
            -->
            <parallel>1</parallel>
        </hold_targeter>

        <!-- Settings for the fine generator cron job -->
        <fine_generator>
            <!-- number of parallel processes to use during fine generation -->
            <parallel>1</parallel>
        </fine_generator>
        
        <reporter>
            <!--
            Settings for the reporter daemon process 
            -->
            <setup>
                <base_uri>https://localhost/reporter/</base_uri>
                <database>
                    <driver>Pg</driver>
                    <host>localhost</host>
                    <port>5432</port>
                    <db>evergreen</db>
                    <user>postgres</user>
                    <pw>postgres</pw>
                    <application_name>Clark Kent (reports)</application_name>
                </database>
                <state_store>
                    <driver>Pg</driver>
                    <host>localhost</host>
                    <port>5432</port>
                    <db>evergreen</db>
                    <user>postgres</user>
                    <pw>postgres</pw>
                    <application_name>Clark Kent (state)</application_name>
                </state_store>
                <files>
                    <!-- successful report outputs go here -->
                    <output_base>LOCALSTATEDIR/web/reporter</output_base>
                    <success_template>LOCALSTATEDIR/data/report-success</success_template>
                    <fail_template>LOCALSTATEDIR/data/report-fail</fail_template>
                </files>
                <!-- Number of reports that can be processed simultaneously.  This
                     value can overriden by the -c/-concurrency command-line switch
                     of clark-kent.pl.
                -->
                <parallel>1</parallel>
                <!-- Maximum number of rows in the query results allowed before
                     Clark will refuse to draw a pie, bar, or line chart.  This
                     value can be overriden by the -max-rows-for-charts command-line
                     switch of clark-kent.pl.
                -->
                <max_rows_for_charts>1000</max_rows_for_charts>
                <!-- Maximum amount of time (in minutes) that an SQL query initiated
                     by Clark Kent will be allowed to run before it is terminated.
                     This value can be overriden by the -statement-timeout
                     command-line switch of clark-kent.pl.
                -->
                <statement_timeout>60</statement_timeout>
                <!-- Maximum number of results permitted.  If set to a numeric value,
                     Clark will limit the number of rows returned by report queries
                     to this value.  Note that it will not be apparent to a user
                     running a report from the staff interface that their report
                     has been limited in this fashion.  This setting can be
                     overriden by the -resultset-limit command-line switch of
                     clark-kent.pl.

                     A value of 0 means that no limit should be set.
                -->
                <resultset_limit>1048575</resultset_limit>
            </setup>
        </reporter>



        <xml-rpc>
            <!-- XML-RPC gateway.  Do NOT publish unprotected services here -->
            <allowed_services>
                <!-- list of published services -->
                <service>opensrf.math</service>
                <service>opensrf.dbmath</service>
                <service>open-ils.cat</service>
                <service>open-ils.search</service>
                <service>open-ils.circ</service>
                <service>open-ils.actor</service>
                <service>open-ils.auth</service>
                <service>open-ils.auth_proxy</service>
                <service>open-ils.collections</service>
                <service>open-ils.justintime</service>
            </allowed_services>
        </xml-rpc>

        <!--
        Once upon a time, Z39.50 servers were defined here. As of Evergreen 2.2,
        they are now defined in the database. See the Release Notes for
        instructions on mapping the old XML entries to database tables.
        -->

        <http_client>
            <!--
            These settings are used by the OpenILS::Utils::HTTPClient module
            when communicating with external services (e.g. third-party APIs)
            over HTTP.  Values are passed along to LWP::UserAgent.
            -->

            <!-- custom useragent for HTTP requests
            <useragent>Evergreen</useragent>
            -->

            <!-- default timeout value (in seconds) -->
            <default_timeout>60</default_timeout>

            <ssl_opts>
                <!--
                When using HTTPS, verify that the external server has a valid
                SSL certificate matching the expected hostname.  (Set to 0 to
                disable verification, 1 to enable it.)
                -->
                <verify_hostname>1</verify_hostname>

                <!--
                If verify_hostname is enabled, you may need to specify a path
                for CA certificates installed on your system.  Use ONE of the
                following settings.  See LWP::UserAgent docs for details.
                <SSL_ca_path>/etc/ssl/certs</SSL_ca_path>
                <SSL_ca_file>/etc/ssl/certs/ca-certificates.crt</SSL_ca_file>
                -->
            </ssl_opts>

        </http_client>

        <added_content>
            <!-- load the OpenLibrary added content module -->
            <module>OpenILS::WWW::AddedContent::OpenLibrary</module>

            <!--
            Max number of seconds to wait for an added content request to 
            return data.  Data not returned within the timeout is considered
            a failure.

            Note that the pool of Apache processes used by the AddedContent
            module is the same pool used by core Evergreen processes such as
            search, circulation, etc. Therefore, the higher you set this
            timeout value, the more likely you are to run out of available
            Apache processes resulting in an accidental (or purposeful) denial
            of service - particularly if the added content server starts
            responding abnormally slowly.

            The safest option is to disable the AddedContent module completely,
            but 3 seconds is a compromise between the threat of a denial of
            service and the enhanced user experience offered by successful added
            content requests.
            -->
            <timeout>3</timeout>

            <!--
            After added content lookups have been disabled due to too many
            lookup failures, this is the amount of time to wait before
            we try again
            -->
            <retry_timeout>600</retry_timeout>

            <!--
            maximum number of consecutive lookup errors a given process can 
            have before added content lookups are disabled for everyone
            -->
            <max_errors>15</max_errors>

            <!-- If a userid is required to access the added content.. -->
            <userid>MY_USER_ID</userid>

            <!--
            Base URL for Amazon added content fetching. Not needed by OpenLibrary
            <base_url>http://images.amazon.com/images/P/</base_url>
            -->

            <!--
            Segregating the details for ContentCafe out for easier use.  At some point, we
            may want to support multiple services at one time.
            -->
            <ContentCafe>
                <userid>MY_USER_ID</userid>
                <password>MY_PASSWORD</password>

                <!--
                Which order to put identifiers in.
                Default is "isbn,upc", ignoring currently unsupported issn.
                Should be all lowercase.
                Remove an identifier from the list to skip it.
                -->
                <identifier_order>isbn,upc</identifier_order>
            </ContentCafe>

            <!--
            Segregating the details for obalkyknih.cz out for easier use.
            -->
            <ObalkyKnih>
                <!-- Covers are there always -->

                <!-- Annotations provided by obalkyknih.cz is mapped to evergreen summary -->
                <summary>false</summary>
                
                <!-- Provider obalkyknih.cz provides TOC as text and as PDF plus thumbnail -->
                <tocPdf>true</tocPdf>
                <tocText>false</tocText>
                
                <!-- User reviews from obalkyknih.cz -->
                <reviews>true</reviews>

            </ObalkyKnih>

            <!--
 
            You can add free-form settings here and they will be accessible
            within the added content module
            -->

        </added_content>

        <!-- Config section for acq_order_reader.pl script.
             It reads MARC order record files from disk (presumably
             an FTP destination) and pushes the order records into ACQ.
             THIS IS NOT EDI. -->
        <acq_order_reader>

            <!-- Root directory for all FTP'd ACQ order record files .
                 If the script is configured to talk to a remote acq server,
                 this directory has to be a read/write NFS share.  -->
            <base_dir>/openils/var/data/acq_orders/</base_dir>

            <!-- any files found in the shared subdir must be inspected
                 (e.g. file name prefix) to determine the provider. -->
            <shared_subdir>ALL</shared_subdir><!-- SUPPORT PENDING -->

            <!-- providers that don't provide a mechanism to inspect the file
                 have to push their files to provider-specific locations -->
            <provider>
                <ordering_agency>BR1</ordering_agency> <!-- who gets/manages the order -->
                <provider_code>BAB</provider_code>   
                <provider_owner>CONS</provider_owner>  <!-- provider provider_owner; org unit shortname -->
                <subdir>CONS-BAB</subdir> <!-- file directory;  full path = base_dir + subdir -->
                <activate_po>false</activate_po> <!-- activate PO at upload? -->
                <vandelay>
                    <import_no_match>true</import_no_match>
                    <!-- Most Vandelay options are supported.  For bools, use true/false.
                        match_quality_ratio 
                        match_set 
                        bib_source 
                        merge_profile
                        create_assets
                        import_no_match 
                        auto_overlay_exact 
                        auto_overlay_1match 
                        auto_overlay_best_match
                    -->
                </vandelay>
            </provider>

            <!-- Add more as needed...
            <provider>
                ...
            </provider>
            -->

        </acq_order_reader>


        <!-- no apps are enabled globally by default -->
        <activeapps/> 

        <!-- 
            If this setting is "true", Evergreen "authoritative" APIs
            will be enabled, forcing select API calls to wrap read calls
            in a database BEGIN/ROLLBACK so they read from the primary
            database.
        -->
        <uses_pooled_read_replica_dbs>false</uses_pooled_read_replica_dbs>

        <cache>
            <!-- memcache servers -->
            <global>
                <servers>
                    <server>127.0.0.1:11211</server>
                </servers>
                <max_cache_time>86400</max_cache_time>
            </global>
            <anon>
                <!-- anonymous cache.  currently, primarily used for web session caching -->
                <servers>
                    <server>127.0.0.1:11211</server>
                </servers>
                <max_cache_time>1800</max_cache_time>
                <!-- maximum size of a single cache entry / default = 100k-->
                <max_cache_size>102400</max_cache_size>
            </anon>
        </cache>

        <apps>
            <!-- Acquisitions server -->
            <open-ils.acq>
                <!-- how long to wait between stateful requests before the child process re-joins the pool -->
                <keepalive>5</keepalive>
                <!-- true if this service support stateless requests -->
                <stateless>1</stateless>
                <!-- implementation language -->
                <language>perl</language>
                <!-- name of the library that implements this application -->
                <implementation>OpenILS::Application::Acq</implementation>
                <!-- maximum OpenSRF REQUEST within a stateful connection -->
                <max_requests>100</max_requests>
                <unix_config>
                    <!--
                    maximum number of top level requests coming to 
                    this child before the child is recycled
                    -->
                    <max_requests>100</max_requests>
                    <!-- maximum number of messages to allow to build up in the
                    backlog before returning errors to callers -->
                    <max_backlog_queue>100</max_backlog_queue>
                    <!-- min children to fork -->
                    <min_children>1</min_children>
                    <!-- max possible children to fork -->
                    <max_children>15</max_children>
                    <!--
                    C forking implementation does not support 
                    min/max idle children, but may in the future
                    -->

                    <!-- min idle children -->
                    <min_spare_children>1</min_spare_children>
                    <!-- max idle children -->
                    <max_spare_children>5</max_spare_children>
                    <!-- currently, only Perl uses the following 3 settings -->
                    <unix_sock>open-ils.acq_unix.sock</unix_sock>
                    <unix_pid>open-ils.acq_unix.pid</unix_pid>
                    <unix_log>open-ils.acq_unix.log</unix_log>
                </unix_config>
            </open-ils.acq>

            <!-- Authentication server -->
            <open-ils.auth>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>c</language>
                <implementation>liboils_auth.so</implementation>
                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <!-- defined app-specific settings here -->
                    <auth_limits>
                        <seed>30</seed> <!-- amount of time a seed request is valid for -->
                        <block_time>90</block_time> <!-- amount of time since last auth or seed request to save failure counts -->
                        <block_count>10</block_count> <!-- number of failures before blocking access -->
                    </auth_limits>
                </app_settings>
            </open-ils.auth>

            <!-- Internal authentication server -->
            <open-ils.auth_internal>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>c</language>
                <implementation>liboils_auth_internal.so</implementation>
                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <!-- defined app-specific settings here -->
                    <default_timeout>
                        <!-- default login timeouts based on login type -->
                        <api>3600</api>
                        <opac>420</opac>
                        <staff>7200</staff>
                        <temp>300</temp>
                        <persist>2 weeks</persist>
                    </default_timeout>
                </app_settings>
            </open-ils.auth_internal>

            <!-- Authentication MFA server -->
            <open-ils.auth_mfa>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::MultiFactorAuth</implementation>
                <max_requests>1000</max_requests>

                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.auth_mfa.log</unix_log>
                    <unix_sock>open-ils.auth_mfa.sock</unix_sock>
                    <unix_pid>open-ils.auth_mfa.pid</unix_pid>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>

                <app_settings>
                    <!-- 'enabled' is the master switch; set to 'true' to enable MFA -->
                    <enabled>false</enabled>
                    <!-- set 'honor_secondary_groups' to to 'true' allow secondary group membership to act in the same way as profile group for MFA availability and factor list -->
                    <honor_secondary_groups>false</honor_secondary_groups>
                    <factors>
                        <totp>
                            <enabled>true</enabled>
                            <fuzziness>1</fuzziness>
                        </totp>
                        <sms>
                            <enabled>false</enabled>
                        </sms>
                        <email>
                            <enabled>false</enabled>
                        </email>
                        <webauthn>
                            <enabled>true</enabled>
                        </webauthn>
                    </factors>
                </app_settings>
            </open-ils.auth_mfa>

             <!-- Authentication proxy server -->
            <open-ils.auth_proxy>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::AuthProxy</implementation>
                <max_requests>93</max_requests>

                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.auth-proxy_unix.log</unix_log>
                    <unix_sock>open-ils.auth-proxy_unix.sock</unix_sock>
                    <unix_pid>open-ils.auth-proxy_unix.pid</unix_pid>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>

                <app_settings>
                    <!-- 'enabled' is the master switch; set to 'true' to enable proxied logins -->
                    <enabled>false</enabled>
                    <authenticators>
                        <!-- the following is a sample configuration for the LDAP_Auth module; please adjust as needed -->
                        <!--
                        <authenticator>
                            <name>ldap</name>
                            <module>OpenILS::Application::AuthProxy::LDAP_Auth</module>
                            <hostname>name.domain.com</hostname>
                            <basedn>ou=people,dc=domain,dc=com</basedn>
                            <authid>cn=username,ou=specials,dc=domain,dc=com</authid>
                            <id_attr>uid</id_attr>
                            <bind_attr>uid</bind_attr>
                            <password>my_ldap_password_for_authid_user</password>
                            <login_types>
                                <type>staff</type>
                                <type>opac</type>
                                <type>persist</type>
                            </login_types>
                            <org_units>
                                <unit>103</unit>
                                <unit>104</unit>
                            </org_units>
                            <restrict_by_home_ou>false</restrict_by_home_ou>
                        </authenticator>
                        -->
                        <!-- 'native' is a proxied version of Evergreen's standard authentication -->
                        <authenticator>
                            <name>native</name>
                            <!-- you can add 'login_types' and 'org_units' limits to this authenticator as well, if needed -->
                        </authenticator>
                    </authenticators>
                </app_settings>
            </open-ils.auth_proxy>

            <!-- Generic search server -->
            <open-ils.search>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Search</implementation>
                <max_requests>93</max_requests>
                <unix_config>
                    <unix_sock>open-ils.search_unix.sock</unix_sock>
                    <unix_pid>open-ils.search_unix.pid</unix_pid>
                    <unix_log>open-ils.search_unix.log</unix_log>

                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <marc_html_xsl>oilsMARC21slim2HTML.xsl</marc_html_xsl>
                    <marc_html_xsl_slim>oilsMARC21slim2HTMLslim.xsl</marc_html_xsl_slim>

                    <spelling_dictionary>
                        <!-- 
                            Optionally configure different dictionaries depending on search context.  
                            If no dictionaries are defined, the default Aspell dictionary is used.
                        -->
                        <!--
                        <default>LOCALSTATEDIR/data/default_dict.txt</default>
                        <title>LOCALSTATEDIR/data/title_dict.txt</title>
                        <author>LOCALSTATEDIR/data/author_dict.txt</author>
                        <subject>LOCALSTATEDIR/data/subject_dict.txt</subject>
                        <series>LOCALSTATEDIR/data/series_dict.txt</series>
                        -->
                    </spelling_dictionary>

                    <!-- Default to using staged search -->
                    <use_staged_search>true</use_staged_search>

                    <!--
                        For staged search, we estimate hits based on inclusion or exclusion.

                        Valid settings:
                            inclusion - visible ratio on superpage
                            exclusion - excluded ratio on superpage
                            delete_adjusted_inclusion - included ratio on superpage, ratio adjusted by deleted count
                            delete_adjusted_exclusion - excluded ratio on superpage, ratio adjusted by deleted count

                        Under normal circumstances, inclusion is the best strategy, and both delete_adjusted variants
                        will return the same value +/- 1.  The exclusion strategy is the original, and works well
                        when there are few deleted or excluded records, in other words, when the superpage is not
                        sparsely populated with visible records.
                    -->
                    <estimation_strategy>inclusion</estimation_strategy>

                    <!--
                        Evergreen uses a cover density algorithm for calculating relative ranking of matches.  There
                        are several tuning parameters and options available.  By default, no document length normalization
                        is applied.  From the Postgres documentation on ts_rank_cd() (the function used by Evergreen):

                            Since a longer document has a greater chance of containing a query term it is reasonable 
                            to take into account document size, e.g., a hundred-word document with five instances of 
                            a search word is probably more relevant than a thousand-word document with five instances. 
                            Both ranking functions take an integer normalization option that specifies whether and how 
                            a document's length should impact its rank. The integer option controls several behaviors, 
                            so it is a bit mask: you can specify one or more behaviors using | (for example, 2|4).

                                0 (the default) ignores the document length

                                1 divides the rank by 1 + the logarithm of the document length

                                2 divides the rank by the document length

                                4 divides the rank by the mean harmonic distance between extents (this is implemented only by ts_rank_cd)

                                8 divides the rank by the number of unique words in document

                                16 divides the rank by 1 + the logarithm of the number of unique words in document

                                32 divides the rank by itself + 1

                            If more than one flag bit is specified, the transformations are applied in the order listed.

                            It is important to note that the ranking functions do not use any global information, so it 
                            is impossible to produce a fair normalization to 1% or 100% as sometimes desired. Normalization 
                            option 32 (rank/(rank+1)) can be applied to scale all ranks into the range zero to one, but of 
                            course this is just a cosmetic change; it will not affect the ordering of the search results.

                        In Evergreen, these options are set via search modifiers.  The modifiers are mapped in the
                        following way:

                            * #CD_logDocumentLength  => 1  :: rank / (1 + LOG(total_word_count))   :: Longer documents slightly less relevant
                            * #CD_documentLength     => 2  :: rank / total_word_count              :: Longer documents much less relevant
                            * #CD_meanHarmonic       => 4  :: Word Proximity                       :: Greater matched-word distance is less relevant
                            * #CD_uniqueWords        => 8  :: rank / unique_word_count             :: Documents with repeated words much less relevant
                            * #CD_logUniqueWords     => 16 :: rank / (1 + LOG(unique_word_count))  :: Documents with repeated words slightly less relevant
                            * #CD_selfPlusOne        => 32 :: rank / (1 + rank)                    :: Cosmetic normalization of rank value between 0 and 1

                        Adding one or more of these to the default_CD_modifiers list will cause all searches that use QueryParser to apply them.
                    -->
                    <default_CD_modifiers>#CD_documentLength #CD_meanHarmonic #CD_uniqueWords</default_CD_modifiers>

                    <!--
                        default_preferred_language
                            Set the global, default preferred languange
                    -->
                    <default_preferred_language>eng</default_preferred_language>

                    <!--
                        default_preferred_language_weight
                            Set the weight (higher is "better") for the preferred language. Comment out to remove all lanuage weighting by default.
                    -->
                    <default_preferred_language_weight>5</default_preferred_language_weight>

                    <!-- Baseline number of records to check for hit estimation. -->
                    <superpage_size>1000</superpage_size>

                    <!-- How many superpages to consider for searching overall. -->
                    <max_superpages>100</max_superpages>

                    <!-- zip code database file -->
                    <!--<zips_file>LOCALSTATEDIR/data/zips.txt</zips_file>-->
                </app_settings>
            </open-ils.search>

            <!-- server for accessing user info -->
            <open-ils.actor>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Actor</implementation>
                <max_requests>93</max_requests>
                <unix_config>
                    <unix_sock>open-ils.actor_unix.sock</unix_sock>
                    <unix_pid>open-ils.actor_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.actor_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <!-- set this to 'true' to have barcode search also search patron records by unique ID -->
                <app_settings>
                    <id_as_barcode>false</id_as_barcode>
                </app_settings>

            </open-ils.actor>

            <open-ils.booking>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Booking</implementation>
                <max_requests>199</max_requests>
                <unix_config>
                    <unix_sock>open-ils.booking_unix.sock</unix_sock>
                    <unix_pid>open-ils.booking_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.booking_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                </app_settings>
            </open-ils.booking>

            <open-ils.geo>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Geo</implementation>
                <max_requests>199</max_requests>
                <unix_config>
                    <unix_sock>open-ils.geo_unix.sock</unix_sock>
                    <unix_pid>open-ils.geo_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.geo_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                  <cache_timeout>300</cache_timeout>
                </app_settings>
            </open-ils.geo>

            <open-ils.cat>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Cat</implementation>
                <max_requests>199</max_requests>
                <unix_config>
                    <unix_sock>open-ils.cat_unix.sock</unix_sock>
                    <unix_pid>open-ils.cat_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.cat_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <marctemplates>
                        <K_book>LOCALSTATEDIR/templates/marc/k_book.xml</K_book>
                    </marctemplates>
                </app_settings>
            </open-ils.cat>

            <open-ils.supercat>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::SuperCat</implementation>
                <max_requests>199</max_requests>
                <unix_config>
                    <unix_sock>open-ils.supercat_unix.sock</unix_sock>
                    <unix_pid>open-ils.supercat_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.supercat_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <oai>
                        <!-- Where necessary, override the default settings here in the app_settings element. -->

                        <!-- The OAI endpoint. The domain is the name of your proxy or frontend opac website. -->
                        <!-- <base_url>http://mydomain.org/opac/extras/oai</base_url> -->

                        <!-- <repository_name>My organization(s)</repository_name> -->
                        <!-- <admin_email>admin@mydomain.org</admin_email> -->

                        <!-- The maximum number of records in a ListRecords and ListIdentifiers response. -->
                        <!-- <max_count>50</max_count> -->

                        <!-- <granularity>YYYY-MM-DDThh:mm:ss</granularity> -->
                        <!-- <earliest_datestamp>0001-01-01</earliest_datestamp> -->
                        <!-- <deleted_record>yes</deleted_record> -->
                        <!-- <scheme>oai</scheme> -->
                        <!-- <repository_identifier>mydomain.org</repository_identifier> -->
                        <!-- <delimiter>:</delimiter> -->
                        <!-- <sample_identifier>oai:mydomain.org:12345</sample_identifier> -->

                        <!--
                        The metadataformat element contains the schema for the oai_dc and marcxml metadata formats.
                        Each schema needs a reference to an xslt document.
                        You can replace them with your custom xslt stylesheets.
                        Place those in the /<openils sysdir>/var/xsl folder.
                        You can also extend the OAI2 service further with new metadata schema.

                        Bibliographic and authority records share the same stylesheet.
                        Should you want to render them differently, use the
                        marc:datafield[@tag='901']/marc:subfield[@code='t']
                        value to identify the record type. -->

                        <!--
                        <metadataformat>
                            <oai_dc>
                                <namespace_uri>http://www.openarchives.org/OAI/2.0/oai_dc/</namespace_uri>
                                <schema_location>http://www.openarchives.org/OAI/2.0/oai_dc.xsd</schema_location>
                                <xslt>MARC21slim2OAIDC.xsl</xslt>
                            </oai_dc>
                            <marcxml>
                                <namespace_uri>http://www.loc.gov/MARC21/slim</namespace_uri>
                                <schema_location>http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd</schema_location>
                            </marcxml>
                        </metadataformat> -->

                        <!--
                        You can add different schema to the metadataformat element thus:
                            <mods>
                                <namespace_uri>http://www.loc.gov/mods/</namespace_uri>
                                <schema_location>http://www.loc.gov/standards/mods/mods.xsd</schema_location>
                                <xslt>my-custom-marc2mods.xsl</xslt>
                            </mods>
                            <my-metadata_prefix>
                                <namespace_uri>my-namespace_uri</namespace_uri>
                                <schema_location>my-schema_location</schema_location>
                                <xslt>my-marc2my-metadata.xsl</xslt>
                            </my-metadata_prefix>
                        -->

                        <!-- Change the way the asset copy values are mapped to which subfield codes: -->
                        <!--
                        <copies>
                            <a>location</a>
                            <b>owning_lib</b>
                            <c>callnumber</c>
                            <d>circlib</d>
                            <g>barcode</g>
                            <n>status</n>
                        </copies>
                        -->
                        <!-- Or add static values to the copies element like this:
                            <z>A value that always should for example be in the 852$z</z>
                        -->

                        <!-- Accept only 852$[barcode] values that match this regular expression. E.g.
                        <barcode_filter>^[A-Za-z0-9]+</barcode_filter>
                        only renders 852 datafields that contain barcodes values that begin with letters and numbers.
                        -->
                        <!--
                        <barcode_filter><barcode_filter>
                        -->

                        <!-- Accept only 852$[status] values that match this regular expression. E.g.
                        <status_filter>^Available$</status_filter>
                        only renders 852 datafields that contain status code values that exactly match the string 'Available'.
                        -->
                        <!--
                        <status_filter></status_filter>
                        -->
                    </oai>
                </app_settings>

            </open-ils.supercat>

            <!-- server for accessing user info -->
            <open-ils.trigger>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Trigger</implementation>
                <max_requests>93</max_requests>
                <unix_config>
                    <unix_sock>open-ils.trigger_unix.sock</unix_sock>
                    <unix_pid>open-ils.trigger_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.trigger_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <!-- number of parallel open-ils.trigger processes to use for collection and reaction -->
                    <!--
                    <parallel>
                        <collect>3</collect>
                        <react>3</react>
                    </parallel>
                    -->
                </app_settings>
            </open-ils.trigger>

            <open-ils.url_verify>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::URLVerify</implementation>
                <max_requests>199</max_requests>
                <unix_config>
                    <unix_sock>open-ils.url_verify_unix.sock</unix_sock>
                    <unix_pid>open-ils.url_verify_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.url_verify_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <user_agent>Evergreen %s Link Checker</user_agent>
                </app_settings>
            </open-ils.url_verify>

            <opensrf.math>
                <keepalive>3</keepalive>
                <stateless>1</stateless>
                <language>c</language>
                <implementation>libosrf_math.so</implementation>
                <unix_config>
                    <unix_sock>opensrf.math_unix.sock</unix_sock>
                    <unix_pid>opensrf.math_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>opensrf.math_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
            </opensrf.math>

            <opensrf.dbmath> 
                <keepalive>3</keepalive>
                <stateless>1</stateless>
                <language>c</language>
                <implementation>libosrf_dbmath.so</implementation>
                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>opensrf.dbmath_unix.log</unix_log>
                    <unix_sock>opensrf.dbmath_unix.sock</unix_sock>
                    <unix_pid>opensrf.dbmath_unix.pid</unix_pid>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children> 
                    <max_spare_children>5</max_spare_children>
                </unix_config>
            </opensrf.dbmath>

            <open-ils.justintime>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::JustInTime</implementation>
                <max_requests>199</max_requests>
                <unix_config>
                    <unix_sock>open-ils.justintime_unix.sock</unix_sock>
                    <unix_pid>open-ils.justintime_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.justintime_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                </app_settings>
            </open-ils.justintime>

            <open-ils.circ> 
                <keepalive>3</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Circ</implementation>
                <max_requests>99</max_requests>
                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.circ_unix.log</unix_log>
                    <unix_sock>open-ils.circ_unix.sock</unix_sock>
                    <unix_pid>open-ils.circ_unix.pid</unix_pid>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children> 
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <notify_hold>
                        <email>false</email> <!-- set to false to disable hold notice emails -->
                    </notify_hold>
                </app_settings>
            </open-ils.circ>

            <open-ils.storage>
                <keepalive>10</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Storage</implementation>
                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.storage_unix.log</unix_log>
                    <unix_sock>open-ils.storage_unix.sock</unix_sock>
                    <unix_pid>open-ils.storage_unix.pid</unix_pid>
                    <min_children>1</min_children>
                    <max_children>10</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <script_path>LIBDIR/javascript/</script_path>
                    <script_path>LOCALSTATEDIR/catalog/</script_path>
                    <scripts>
                        <biblio_fingerprint>biblio_fingerprint.js</biblio_fingerprint>
                    </scripts>
                    <databases>
                        <driver>Pg</driver>
                        <database>
                            <type>master</type>
                            <weight>2</weight>
                            <user>postgres</user>
                            <host>localhost</host>
                            <port>5432</port>
                            <pw>postgres</pw>
                            <db>evergreen</db>
                            <client_encoding>UTF-8</client_encoding>
                            <application_name>open-ils.storage</application_name>
                        </database>
                    </databases>
                </app_settings>
            </open-ils.storage>

            <open-ils.cstore>
                <keepalive>6</keepalive>
                <stateless>1</stateless>
                <language>C</language>
                <implementation>liboils_cstore.so</implementation>
                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <max_query_recursion>100</max_query_recursion>
                    <driver>pgsql</driver>
                    <database>
                        <type>master</type>
                        <weight>2</weight>
                        <user>postgres</user>
                        <host>localhost</host>
                        <port>5432</port>
                        <pw>postgres</pw>
                        <db>evergreen</db>
                        <client_encoding>UTF-8</client_encoding>
                        <application_name>open-ils.cstore</application_name>
                    </database>
                </app_settings>
            </open-ils.cstore>

            <open-ils.pcrud>
                <keepalive>6</keepalive>
                <migratable>1</migratable>
                <stateless>1</stateless>
                <language>C</language>
                <implementation>liboils_pcrud.so</implementation>

                <unix_config>
                    <unix_log>open-ils.pcrud.log</unix_log>
                    <unix_sock>open-ils.pcrud.sock</unix_sock>
                    <unix_pid>open-ils.pcrud.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>

                <app_settings>
                    <IDL>SYSCONFDIR/fm_IDL.xml</IDL>
                    <driver>pgsql</driver>
                    <database>
                        <type>master</type>
                        <weight>2</weight>
                        <user>postgres</user>
                        <host>localhost</host>
                        <port>5432</port>
                        <pw>postgres</pw>
                        <db>evergreen</db>
                        <client_encoding>UTF-8</client_encoding>
                        <application_name>open-ils.pcrud</application_name>
                    </database>
                </app_settings>
            </open-ils.pcrud>

            <open-ils.qstore>
                <keepalive>6</keepalive>
                <stateless>1</stateless>
                <language>C</language>
                <implementation>liboils_qstore.so</implementation>
                <unix_config>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <driver>pgsql</driver>
                    <database>
                        <type>master</type>
                        <weight>2</weight>
                        <user>postgres</user>
                        <host>localhost</host>
                        <port>5432</port>
                        <pw>postgres</pw>
                        <db>evergreen</db>
                        <client_encoding>UTF-8</client_encoding>
                        <application_name>open-ils.qstore</application_name>
                    </database>
                </app_settings>
            </open-ils.qstore>

            <opensrf.settings>
                <keepalive>1</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenSRF::Application::Settings</implementation>
                <max_requests>17</max_requests>
                <unix_config>
                    <unix_sock>opensrf.settings_unix.sock</unix_sock>
                    <unix_pid>opensrf.settings_unix.pid</unix_pid>
                    <max_requests>300</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>opensrf.settings_unix.log</unix_log>
                    <min_children>5</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>3</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
            </opensrf.settings>

            <open-ils.collections>
                <keepalive>3</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Collections</implementation>
                <max_requests>17</max_requests>
                <unix_config>
                    <unix_sock>open-ils.collections_unix.sock</unix_sock>
                    <unix_pid>open-ils.collections_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.collections_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>10</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <!-- batch_file_dir must be a protected, web-accessible, shared directory -->
                    <batch_file_dir>/openils/var/web/collections</batch_file_dir>
                </app_settings>
            </open-ils.collections>

            <open-ils.reporter>
                <keepalive>3</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Reporter</implementation>
                <max_requests>99</max_requests>
                <unix_config>
                    <unix_sock>open-ils.reporter_unix.sock</unix_sock>
                    <unix_pid>open-ils.reporter_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.reporter_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>10</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
            </open-ils.reporter>

            <open-ils.reporter-store>
                <keepalive>6</keepalive>
                <stateless>1</stateless>
                <language>C</language>
                <implementation>liboils_rstore.so</implementation>
                <unix_config>
                    <max_requests>400</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>10</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <driver>pgsql</driver>
                    <database>
                        <type>master</type>
                        <weight>2</weight>
                        <user>postgres</user>
                        <host>localhost</host>
                        <port>5432</port>
                        <pw>postgres</pw>
                        <db>evergreen</db>
                        <client_encoding>UTF-8</client_encoding>
                        <application_name>open-ils.reporter-store</application_name>
                    </database>
                </app_settings>
            </open-ils.reporter-store>

<!-- resolver_type defaults to sfx but can also be cufts -->
<!--
           <open-ils.resolver>
               <keepalive>3</keepalive>
               <stateless>1</stateless>
               <language>perl</language>
               <implementation>OpenILS::Application::ResolverResolver</implementation>
               <max_requests>93</max_requests>
               <unix_config>
                  <unix_sock>open-ils.resolver_unix.sock</unix_sock>
                  <unix_pid>open-ils.resolver_unix.pid</unix_pid>
                  <max_requests>1000</max_requests>
                  <max_backlog_queue>100</max_backlog_queue>
                  <unix_log>open-ils.resolver_unix.log</unix_log>
                  <min_children>5</min_children>
                  <max_children>15</max_children>
                  <min_spare_children>3</min_spare_children>
                  <max_spare_children>5</max_spare_children>
               </unix_config>
               <app_settings>
                  <cache_timeout>86400</cache_timeout>
                  <request_timeout>10</request_timeout>
                  <default_url_base>http://path/to/sfx_or_cufts</default_url_base>
                  <resolver_type>sfx</resolver_type>
               </app_settings>
            </open-ils.resolver>
-->

            <open-ils.permacrud>
               <keepalive>3</keepalive>
               <stateless>1</stateless>
               <language>perl</language>
               <implementation>OpenILS::Application::PermaCrud</implementation>
               <max_requests>17</max_requests>
               <unix_config>
                  <unix_sock>open-ils.permacrud_unix.sock</unix_sock>
                  <unix_pid>open-ils.permacrud_unix.pid</unix_pid>
                  <max_requests>1000</max_requests>
                  <max_backlog_queue>100</max_backlog_queue>
                  <unix_log>open-ils.permacrud_unix.log</unix_log>
                  <min_children>5</min_children>
                  <max_children>15</max_children>
                  <min_spare_children>3</min_spare_children>
                  <max_spare_children>5</max_spare_children>
               </unix_config>
            </open-ils.permacrud>

            <open-ils.fielder>
               <keepalive>3</keepalive>
               <stateless>1</stateless>
               <language>perl</language>
               <implementation>OpenILS::Application::Fielder</implementation>
               <max_requests>17</max_requests>
               <unix_config>
                  <unix_sock>open-ils.fielder_unix.sock</unix_sock>
                  <unix_pid>open-ils.fielder_unix.pid</unix_pid>
                  <max_requests>1000</max_requests>
                  <max_backlog_queue>100</max_backlog_queue>
                  <unix_log>open-ils.fielder_unix.log</unix_log>
                  <min_children>5</min_children>
                  <max_children>15</max_children>
                  <min_spare_children>3</min_spare_children>
                  <max_spare_children>5</max_spare_children>
               </unix_config>
            </open-ils.fielder>

            <open-ils.vandelay>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Vandelay</implementation>
                <max_requests>100</max_requests>
                <unix_config>
                    <unix_sock>vandelay_unix.sock</unix_sock>
                    <unix_pid>vandelay_unix.pid</unix_pid>
                    <unix_log>vandelay_unix.log</unix_log>
                    <max_requests>100</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                    <databases>
                        <!-- temporary location for MARC import files.  
                            Files will be deleted after records are spooled.
                            *note:  in a multi-brick environment, this will need to
                            be on a write-able NFS share.  -->
                        <importer>/tmp</importer>
                        <!-- permanent location for locally added content -->
                        <jackets>/openils/var/web/opac/extras/ac</jackets>
                    </databases>
                </app_settings>
            </open-ils.vandelay>

            <open-ils.serial>
                <keepalive>3</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Serial</implementation>
                <max_requests>17</max_requests>
                <unix_config>
                    <unix_sock>open-ils.serial_unix.sock</unix_sock>
                    <unix_pid>open-ils.serial_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.serial_unix.log</unix_log>
                    <min_children>5</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>3</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                </app_settings>
            </open-ils.serial>

            <open-ils.hold-targeter>
                <keepalive>3</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::HoldTargeter</implementation>
                <max_requests>17</max_requests>
                <unix_config>
                    <unix_sock>open-ils.hold-targeter_unix.sock</unix_sock>
                    <unix_pid>open-ils.hold-targeter_unix.pid</unix_pid>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <unix_log>open-ils.hold-targeter_unix.log</unix_log>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                </app_settings>
            </open-ils.hold-targeter>

            <open-ils.ebook_api>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::EbookAPI</implementation>
                <max_requests>100</max_requests>
                <unix_config>
                    <unix_sock>ebook_api_unix.sock</unix_sock>
                    <unix_pid>ebook_api_unix.pid</unix_pid>
                    <unix_log>ebook_api_unix.log</unix_log>
                    <max_requests>100</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                  <cache_timeout>300</cache_timeout>
                  <request_timeout>60</request_timeout>
                </app_settings>
            </open-ils.ebook_api>

            <open-ils.courses>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Courses</implementation>
                <max_requests>100</max_requests>
                <unix_config>
                    <unix_sock>courses_unix.sock</unix_sock>
                    <unix_pid>courses_unix.pid</unix_pid>
                    <unix_log>courses_unix.log</unix_log>
                    <max_requests>100</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
            </open-ils.courses>

            <open-ils.sip2>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::SIP2</implementation>
                <max_requests>100</max_requests>
                <unix_config>
                    <unix_sock>sip2_unix.sock</unix_sock>
                    <unix_pid>sip2_unix.pid</unix_pid>
                    <unix_log>sip2_unix.log</unix_log>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                </app_settings>
            </open-ils.sip2>

            <open-ils.curbside>
                <keepalive>5</keepalive>
                <stateless>1</stateless>
                <language>perl</language>
                <implementation>OpenILS::Application::Curbside</implementation>
                <max_requests>1000</max_requests>
                <unix_config>
                    <unix_sock>curbside_unix.sock</unix_sock>
                    <unix_pid>curbside_unix.pid</unix_pid>
                    <unix_log>curbside_unix.log</unix_log>
                    <max_requests>1000</max_requests>
                    <max_backlog_queue>100</max_backlog_queue>
                    <min_children>1</min_children>
                    <max_children>15</max_children>
                    <min_spare_children>1</min_spare_children>
                    <max_spare_children>5</max_spare_children>
                </unix_config>
                <app_settings>
                </app_settings>
            </open-ils.curbside>

        </apps>
    </default>

    <hosts>

        <localhost> 
            <!-- ^-=- 
            Should match the fully qualified domain name of the host.

            On Linux, the output of the following command is authoritative:
            $ perl -MNet::Domain -e 'print Net::Domain::hostfqdn() . "\n";'

            To use 'localhost' instead, run osrf_control with the 'localhost' flag
            -->

            <activeapps>
                <!-- services hosted on this machine -->
                <appname>opensrf.settings</appname> 
                <appname>opensrf.math</appname> 
                <appname>opensrf.dbmath</appname> 
                <appname>open-ils.acq</appname> 
                <appname>open-ils.booking</appname>
                <appname>open-ils.cat</appname> 
                <appname>open-ils.supercat</appname> 
                <appname>open-ils.search</appname> 
                <appname>open-ils.circ</appname> 
                <appname>open-ils.actor</appname> 
                <appname>open-ils.auth</appname> 
                <appname>open-ils.auth_internal</appname>
                <appname>open-ils.auth_proxy</appname> 
                <appname>open-ils.auth_mfa</appname> 
                <appname>open-ils.storage</appname>  
                <appname>open-ils.justintime</appname>  
                <appname>open-ils.cstore</appname>  
                <appname>open-ils.collections</appname>
                <appname>open-ils.qstore</appname>
                <appname>open-ils.reporter</appname>  
                <appname>open-ils.reporter-store</appname>  
                <!-- <appname>open-ils.resolver</appname> -->
                <appname>open-ils.permacrud</appname>  
                <appname>open-ils.pcrud</appname>  
                <appname>open-ils.trigger</appname>  
                <appname>open-ils.url_verify</appname>
                <appname>open-ils.fielder</appname>  
                <appname>open-ils.vandelay</appname>  
                <appname>open-ils.serial</appname>  
                <appname>open-ils.hold-targeter</appname>  
                <appname>open-ils.ebook_api</appname>
                <appname>open-ils.courses</appname>
                <appname>open-ils.curbside</appname>
                <appname>open-ils.geo</appname>
                <appname>open-ils.sip2</appname>
            </activeapps>
        </localhost>
    </hosts>

</opensrf>
